name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    services:
      zap:  # Service untuk OWASP ZAP (DAST)
        image: owasp/zap2docker-stable
        ports:
          - "8080:8080"

    steps:
    # ----------------------------------
    # 1. Setup Environment
    # ----------------------------------
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest bandit

    # ----------------------------------
    # 2. Build Stage
    # ----------------------------------
    - name: Build
      run: |
        echo "Building Flask app..."
        # Tambahkan perintah build jika diperlukan
        # Contoh: pyinstaller --onefile app.py

    # ----------------------------------
    # 3. Test Stage (Unit Testing)
    # ----------------------------------
    - name: Run Unit Tests
      run: |
        echo "Running unit tests..."
        pytest tests/ --cov=app --cov-report=xml

    - name: Upload Coverage Report
      uses: codecov/codecov-action@v3

    # ----------------------------------
    # 4. Security Scanning (SAST)
    # ----------------------------------
    - name: Run Bandit SAST
      run: |
        echo "Running Bandit security scan..."
        bandit -r app.py -f json -o bandit_results.json || true

    - name: Upload Bandit Report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit_results.json

    # ----------------------------------
    # 5. DAST Testing (OWASP ZAP) - Menggunakan GitHub Action
    # ----------------------------------
    - name: Start Flask App for DAST
      run: |
        echo "Starting Flask app for DAST testing..."
        python app.py &
        sleep 10 # Tunggu aplikasi startup

    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        # Target URL aplikasi Anda. 'localhost' di sini bisa berfungsi karena Action ini pintar dalam menangani jaringan.
        target: 'http://localhost:5000'
        # Nama file untuk laporan
        report_html: 'zap_report.html'
      # Lanjutkan workflow meskipun ada kerentanan yang ditemukan
      continue-on-error: true

    - name: Upload ZAP Report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: zap_report.html

    # ----------------------------------
    # 6. Deployment (Staging)
    # ----------------------------------
    - name: Deploy to Staging
      if: github.ref == 'refs/heads/dev'
      run: |
        echo "Deploying to staging environment..."
        git push https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git dev:main
